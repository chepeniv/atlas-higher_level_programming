#doctest :
#		`python -m doctest -v progName.py`
#unittest :
#		`python -m unittest test_module_name`
#	or
#		`python -m unittest`

>>> import importlib
>>> my_module = importlib.import_module("7-base_geometry")
>>> MyClass = my_module.BaseGeometry
>>> a = MyClass()
>>> a.area()
Traceback (most recent call last):
	...
Exception: area() is not implemented
>>> a.integer_validator()
Traceback (most recent call last):
	...
TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'
>>> a.integer_validator("length")
Traceback (most recent call last):
	...
TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'
>>> a.integer_validator("length", True)
Traceback (most recent call last):
	...
TypeError: length must be an integer
>>> a.integer_validator("length", 0.33)
Traceback (most recent call last):
	...
TypeError: length must be an integer
>>> a.integer_validator("length", -9)
Traceback (most recent call last):
	...
ValueError: length must be greater than 0
>>> a.integer_validator("length", "long")
Traceback (most recent call last):
	...
TypeError: length must be an integer
>>> a.integer_validator("length", 10)
>>> a.integer_validator("length", None)
Traceback (most recent call last):
	...
TypeError: length must be an integer
